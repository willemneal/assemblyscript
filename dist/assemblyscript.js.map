<<<<<<< master
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","basicClasses","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","registerBasicClass","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","typeKind","className","classElement","globalName","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","superType","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","i64_is_u32","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","compileInstantiate","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_bool","explicitLocal","functionTarget","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBtiF,EAAWowB,GACrC,GAAIpwB,EAAOowB,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEIqyD,EAFArL,EAAK,EACLC,EAAKjnD,EAAIhvB,OAGNg2E,EAAK,EAAIC,GAAI,CAGlB,GAFAoL,EAAMrL,GAAMC,EAAKD,GAAM,EAEnBhnD,EADJqyD,GAAOA,EAAM,IACGziF,GAAQA,GAAQowB,EAAIqyD,EAAM,GACxC,OAAO,EAELziF,EAAOowB,EAAIqyD,GACbpL,EAAKoL,EAELrL,EAAKqL,EAAM,EAGf,OAAO,ikBC5WTjnF,EAAAknF,UAAA,SAA6BzoB,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAI0oB,EAAS,IAAI1gF,MAASg4D,EAAS74D,QAC1BjF,EAAI,EAAGwK,EAAIszD,EAAS74D,OAAQjF,EAAIwK,IAAKxK,EAAGmyB,UAAUq0D,EAAOxmF,GAAK89D,EAAS99D,IAChF,OAAOwmF,EAET,OAAO,IAAI1gF,OAGbzG,EAAAonF,QAAA,SAA2B3oB,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAI0oB,EAAS,IAAI76D,QACjB,IAAc,IAAA+6D,EAAA5iE,EAAAg6C,GAAQ6oB,EAAAD,EAAA1iE,QAAA2iE,EAAA1iE,KAAA0iE,EAAAD,EAAA1iE,OAAA,CAAjB,IAAI4iE,EAACD,EAAA1lF,MAAculF,EAAO56D,IAAIg7D,qGACnC,OAAOJ,EAET,OAAO,IAAI76D,KAGbtsB,EAAAuwD,QAAA,SAA6BkO,WAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CACZ,IAAI0oB,EAAS,IAAI1nE,QACjB,IAAmB,IAAA+nE,EAAA/iE,EAAAg6C,GAAQgpB,EAAAD,EAAA7iE,QAAA8iE,EAAA7iE,KAAA6iE,EAAAD,EAAA7iE,OAAA,CAAlB,IAAAqL,EAAAlL,EAAA2iE,EAAA7lF,MAAA,GAACuJ,EAAA6kB,EAAA,GAAGu3D,EAAAv3D,EAAA,GAAgBm3D,EAAO3+E,IAAI2C,EAAGo8E,qGAC3C,OAAOJ,EAET,OAAO,IAAI1nE,oFClBb,IAAMioE,EAAS,GAMf,SAAgBn2E,EAAcF,GAK5B,IAJA,IAiBIg+C,EAjBAz1C,EAAM,EACNjU,EAAM0L,EAAKzL,OAGRgU,EAAM,EAAIjU,GACK,IAApB0L,EAAKrL,WAAW4T,IAChBvI,EAAKrL,WAAW4T,EAAM,IAAM8tE,GAE5B9tE,GAAO,EAUT,KAPIA,EAAM,GAAKjU,EAAM0L,EAAKzL,UACxByL,EAAOA,EAAKnL,UAAU0T,EAAKjU,GAC3BA,GAAOiU,EACPA,EAAM,GAIDA,EAAM,EAAIjU,GAAK,CAIpB,GAHA0pD,GAAQ,EAINh+C,EAAKrL,WAAW4T,IAAQ8tE,GACA,IAAxBr2E,EAAKrL,WAAW4T,EAAM,GACtB,CAGA,IADAy1C,EAAQz1C,EAAM,GAAKjU,IAEjBiU,EAAM,EAAIjU,GACV0L,EAAKrL,WAAW4T,EAAM,IAAM8tE,EAC5B,CACAr2E,EAAOg+C,EACHh+C,EAAKnL,UAAU,EAAG0T,GAClBvI,EAAKnL,UAAU,EAAG0T,GAAOvI,EAAKnL,UAAU0T,EAAM,GAClDjU,GAAO,EACP,SAKF,IADA0pD,EAAQz1C,EAAM,GAAKjU,IACkB,IAAxB0L,EAAKrL,WAAW4T,EAAM,IACjCA,EAAM,EAAIjU,GACc,IAAxB0L,EAAKrL,WAAW4T,EAAM,IACtBvI,EAAKrL,WAAW4T,EAAM,IAAM8tE,EAC5B,CAGA,IADA,IAAIC,EAAO/tE,IACF+tE,GAAQ,GACf,GAAIt2E,EAAKrL,WAAW2hF,IAASD,EAAW,CAClC9tE,EAAM+tE,GAAQ,GACS,IAAzBt2E,EAAKrL,WAAW2hF,EAAO,IACE,IAAzBt2E,EAAKrL,WAAW2hF,EAAO,KAEvBt2E,EAAOg+C,EACHh+C,EAAKnL,UAAU,EAAGyhF,GAClBt2E,EAAKnL,UAAU,EAAGyhF,GAAQt2E,EAAKnL,UAAU0T,EAAM,GACnDjU,GAAOiU,EAAM,EAAI+tE,EACjB/tE,EAAM+tE,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAK/tE,EAAM,IACT,GAAPA,GACgB,IAAlBvI,EAAKrL,WAAW,IACE,IAAlBqL,EAAKrL,WAAW,IAChB,CAEAL,GADA0L,EAAOA,EAAKnL,UAAU0T,EAAM,IACjBhU,OACX,WAKRgU,IAEF,OAAOjU,EAAM,EAAI0L,EAAO,IAc1B,SAAgBu2E,EAAQviF,GAEtB,IADA,IAAIuU,EAAMvU,EAAeO,SAChBgU,EAAM,GACb,GAAIvU,EAAeW,WAAW4T,IAAQ8tE,EACpC,OAAOriF,EAAea,UAAU,EAAG0T,GAGvC,MAAO,IArGT5Z,EAAAuR,gBAoFAvR,EAAAyR,YAAA,SAA4BpM,EAAwBwiF,GAClD,OAAIxiF,EAAemM,WAAW,QACrBnM,EAEFkM,EACLq2E,EAAQC,GAAU/rC,OAAO4I,aAAagjC,GAAariF,IAKvDrF,EAAA4nF,yFCxGA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjBhoF,EAAAotE,OAAA,SAAuBnnE,EAAcmrC,GACnC,KAAOA,GAAS,GACdnrC,EAAGE,KAAK6hF,GACR52C,GAAS,EAEPA,GAAS,IACXnrC,EAAGE,KAAK4hF,GACR32C,GAAS,GAEPA,GACFnrC,EAAGE,KAAK2hF,kCCQZ,SAAgBG,EAAQ5hD,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBq7B,EAAS//D,EAAYykC,EAAoBC,GACvDD,EAAOC,GAAc1kC,EACrBykC,EAAOC,EAAS,GAAK1kC,IAAU,EAC/BykC,EAAOC,EAAS,GAAK1kC,IAAU,GAC/BykC,EAAOC,EAAS,GAAK1kC,IAAU,GAIjC,SAAgBsmF,EAAQ7hD,EAAoBC,GAC1C,IAAIs1C,EAAKqM,EAAQ5hD,EAAQC,GACrBu1C,EAAKoM,EAAQ5hD,EAAQC,EAAS,GAClC,OAAO9jB,QAAQo5D,EAAIC,oDAzCrB77E,EAAAmoF,OAAA,SAAuB9hD,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBtmC,EAAAwiE,QAAA,SAAwB5gE,EAAYykC,EAAoBC,GACtDD,EAAOC,GAAU1kC,GAInB5B,EAAAooF,QAAA,SAAwB/hD,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/BtmC,EAAA6hE,SAAA,SAAyBjgE,EAAYykC,EAAoBC,GACvDD,EAAOC,GAAc1kC,EACrBykC,EAAOC,EAAS,GAAK1kC,IAAU,GAIjC5B,EAAAioF,UAQAjoF,EAAA2hE,WAQA3hE,EAAAkoF,UAOAloF,EAAAyiE,SAAA,SAAyB7gE,EAAYykC,EAAoBC,GACvDq7B,EAAStxB,QAAQzuC,GAAQykC,EAAQC,GACjCq7B,EAASrxB,SAAS1uC,GAAQykC,EAAQC,EAAS,IAI7CtmC,EAAAqoF,QAAA,SAAwBhiD,EAAoBC,GAC1C,OAAOg1C,WAAW2M,EAAQ5hD,EAAQC,KAIpCtmC,EAAA0iE,SAAA,SAAyB9gE,EAAYykC,EAAoBC,GACvDq7B,EAAS0Z,WAAWz5E,GAAQykC,EAAQC,IAItCtmC,EAAAsoF,QAAA,SAAwBjiD,EAAoBC,GAC1C,OAAOk1C,WAAW0M,EAAQ7hD,EAAQC,KAIpCtmC,EAAA2iE,SAAA,SAAyB/gE,EAAYykC,EAAoBC,GACvD,IAAIiiD,EAAWhN,WAAW35E,GAC1B+/D,EAAStxB,QAAQk4C,GAAWliD,EAAQC,GACpCq7B,EAASrxB,SAASi4C,GAAWliD,EAAQC,EAAS,iJCnEhD,IAAAzK,EAAAp7B,EAAA,GAOA+nF,EAAA/nF,EAAA,IAIAgoF,EAAAhoF,EAAA,IAKAoc,EAAApc,EAAA,GAyCoCT,EAAA0oF,iBAtClC7rE,EAAAxW,wBAOF,IAAAsiF,EAAAloF,EAAA,IASAT,EAAAmuE,UAAA,SAA0BzoE,EAAc2L,EAAc0X,EACpD6/D,GAIA,YALoD,IAAA7/D,OAAA,QACpD,IAAA6/D,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAA9a,QAC1B+a,EAAOza,UAAUzoE,EAAM2L,EAAM0X,GACtB6/D,GAIT5oF,EAAA2vE,SAAA,SAAyBiZ,GACvB,OAAOA,EAAOjZ,YAIhB3vE,EAAA6oF,eAAA,SAA+BD,GAC7B,IAAI17D,EAAU07D,EAAO17D,QACrB,OAAOA,EAAQvN,kBAAoBuN,EAAQ1mB,YAAYZ,OACnDsnB,EAAQ1mB,YAAY0mB,EAAQvN,qBAC5B,MAON3f,EAAA8oF,OAAA,SAAuBrkF,GACrB,OAAOA,EAAQd,UAAYkZ,EAAAvZ,mBAAmBM,MAIhD5D,EAAA+oF,UAAA,SAA0BtkF,GACxB,OAAOA,EAAQd,UAAYkZ,EAAAvZ,mBAAmBO,SAIhD7D,EAAAgpF,QAAA,SAAwBvkF,GACtB,OAAOA,EAAQd,UAAYkZ,EAAAvZ,mBAAmBQ,OAIhD9D,EAAAipF,cAAA,WACE,OAAO,IAAIptD,EAAAwuB,SAIbrqD,EAAAkpF,UAAA,SAA0B3nE,EAAkBoR,GAC1CpR,EAAQoR,OAASA,GAInB3yB,EAAAmpF,iBAAA,SAAiC5nE,EAAkBmB,GACjDnB,EAAQmB,cAAgBA,GAI1B1iB,EAAAopF,YAAA,SAA4B7nE,EAAkBoB,GAC5CpB,EAAQoB,SAAWA,GAIrB3iB,EAAAqpF,gBAAA,SAAgC9nE,EAAkBgpC,GAChDhpC,EAAQgpC,aAAeA,GAIzBvqD,EAAAspF,eAAA,SAA+B/nE,EAAkBipC,GAC/CjpC,EAAQipC,YAAcA,GAIxBxqD,EAAAupF,aAAA,SAA6BhoE,EAAkB8P,GAC7C9P,EAAQ8P,UAAYA,GAItBrxB,EAAAwpF,cAAA,SAA8BjoE,EAAkBqB,GAC9CrB,EAAQqB,WAAaA,GAIvB5iB,EAAAypF,eAAA,SAA+BloE,EAAkBrgB,EAAc+T,GAC7D,IAAI4Q,EAAgBtE,EAAQsE,cACvBA,IAAetE,EAAQsE,cAAgBA,EAAgB,IAAIpG,KAChEoG,EAAcrd,IAAItH,EAAM+T,IAIbjV,EAAA0pF,uBAAsB,EAEtB1pF,EAAA2pF,uBAAsB,EAGnC3pF,EAAA4pF,cAAA,SAA8BroE,EAAkBmpC,GAC9CnpC,EAAQkpC,UAAYC,GAItB1qD,EAAA6pF,sBAAA,SAAsCtoE,EAAkBuoE,EAAoBC,GAC1ExoE,EAAQsB,kBAAoBinE,EAC5BvoE,EAAQuB,gBAAkBinE,GAI5B/pF,EAAAgqF,cAAA,SAA8BpB,GAC5B,OAAOA,EAAO9hC,UAIhB9mD,EAAAiqF,eAAA,SAA+B/8D,EAAkB3L,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIsa,EAAAmvB,SAAS99B,EAAS3L,GAASyqC,WAIxChsD,EAAAkqF,gBAAA,SAAgCjqF,GAC9B,IAAIgpE,EAAa,IAAIuf,EAAA1f,WAErB,OADAG,EAAWD,UAAU/oE,GACdgpE,EAAWniB,UAIpB9mD,EAAAmqF,SAAA,SAAyBj9D,GACvB,OAAOu7D,EAAAxb,WAAWE,MAAMjgD,IAI1BltB,EAAAoqF,SAAA,SAAyBl9D,GACvB,OAAOu7D,EAAAhb,WAAWN,MAAMjgD,IAI1B,IAAAnmB,EAAAtG,EAAA,GAAST,EAAAoD,eAAA2D,EAAA3D,eAGT0D,EAAArG,EAAA,IAEAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA,IACAqG,EAAArG,EAAA","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 19,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 20,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 21,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 22,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 26,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 27,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 28,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 29\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.PARENTHESIZED: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType; keyType.parent = elem;\r\n    elem.valueType = valueType; valueType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low,\r\n  getGetGlobalName\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  basicClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'ArrayBuffer'\r\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\r\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerBasicClass(TypeKind.I8, \"I8\");\r\n    this.registerBasicClass(TypeKind.I16, \"I16\");\r\n    this.registerBasicClass(TypeKind.I32, \"I32\");\r\n    this.registerBasicClass(TypeKind.I64, \"I64\");\r\n    this.registerBasicClass(TypeKind.ISIZE, \"Isize\");\r\n    this.registerBasicClass(TypeKind.U8, \"U8\");\r\n    this.registerBasicClass(TypeKind.U16, \"U16\");\r\n    this.registerBasicClass(TypeKind.U32, \"U32\");\r\n    this.registerBasicClass(TypeKind.U64, \"U64\");\r\n    this.registerBasicClass(TypeKind.USIZE, \"Usize\");\r\n    this.registerBasicClass(TypeKind.BOOL, \"Bool\");\r\n    this.registerBasicClass(TypeKind.F32, \"F32\");\r\n    this.registerBasicClass(TypeKind.F64, \"F64\");\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  private registerBasicClass(typeKind: TypeKind, className: string): void {\r\n    if (this.elementsLookup.has(className)) {\r\n      let element = assert(this.elementsLookup.get(className));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.basicClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantIntegerValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantFloatValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances by class type arguments and function type arguments. */\r\n  instances: Map<string,Map<string,Function>> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Applies class type arguments to the context of a partially resolved instance method. */\r\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\r\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\r\n    var classDeclaration = assert(this.classPrototype).declaration;\r\n    var classTypeParameters = classDeclaration.typeParameters;\r\n    var numClassTypeParameters = classTypeParameters.length;\r\n    assert(numClassTypeParameters == classTypeArguments.length);\r\n    for (let i = 0; i < numClassTypeParameters; ++i) {\r\n      contextualTypeArguments.set(\r\n        classTypeParameters[i].name.text,\r\n        classTypeArguments[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport const enum NativeType {\r\n  None = 0,        // _BinaryenTypeNone(),\r\n  I32  = 1,        // _BinaryenTypeInt32(),\r\n  I64  = 2,        // _BinaryenTypeInt64(),\r\n  F32  = 3,        // _BinaryenTypeFloat32(),\r\n  F64  = 4,        // _BinaryenTypeFloat64(),\r\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\r\n  Auto = -1        // _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n  // SIMDExtract = _BinaryenSIMDExtractId(),\r\n  // SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  // SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  // SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  // SIMDShift = _BinaryenSIMDShiftId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\n// export enum SIMDOp {\r\n//   SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n//   SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n//   SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n//   SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n//   SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n//   SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n//   NotVec128 = _BinaryenNotVec128(),\r\n//   NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n//   AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n//   AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n//   NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n//   AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n//   AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n//   NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n//   AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n//   AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n//   NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n//   AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n//   AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n//   AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n//   NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n//   SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n//   AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n//   NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n//   SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n//   TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n//   TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n//   TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n//   TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n//   ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n//   ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n//   ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n//   ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n//   EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n//   NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n//   LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n//   LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n//   LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n//   LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n//   GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n//   GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n//   GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n//   GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n//   EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n//   NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n//   LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n//   LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n//   LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n//   LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n//   GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n//   GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n//   GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n//   GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n//   EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n//   NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n//   LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n//   LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n//   LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n//   LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n//   GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n//   GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n//   GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n//   GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n//   EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n//   NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n//   LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n//   LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n//   GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n//   GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n//   EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n//   NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n//   LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n//   LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n//   GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n//   GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n//   AndVec128 = _BinaryenAndVec128(),\r\n//   OrVec128 = _BinaryenOrVec128(),\r\n//   XorVec128 = _BinaryenXorVec128(),\r\n//   AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n//   AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n//   AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n//   SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n//   SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n//   SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n//   MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n//   AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n//   AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n//   AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n//   SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n//   SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n//   SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n//   MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n//   AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n//   SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n//   MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n//   AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n//   SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n//   AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n//   SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n//   MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n//   DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n//   MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n//   MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n//   AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n//   SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n//   MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n//   DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n//   MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n//   MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n// }\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = memory.allocate(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveGlobal(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0; // for free'ing\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    memory.free(this.cachedByValue);\r\n    memory.free(this.cachedTemporaryName);\r\n    memory.free(this.cachedPrecomputeName);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current outer function in compilation, if compiling a function expression. */\r\n  currentOuterFunction: Function | null = null;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(\"HEAP_BASE\");\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // determine initial page size\r\n    var numPages = this.memorySegments.length\r\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n      : 0;\r\n    module.setMemory(\r\n      numPages,\r\n      Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if resolved lazily\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      null,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) {\r\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n          stmts.unshift(\r\n            module.createIf(\r\n              module.createUnary(\r\n                UnaryOp.EqzI32,\r\n                module.createGetGlobal(\"~started\", NativeType.I32)\r\n              ),\r\n              module.createBlock(null, [\r\n                module.createCall(\"start\", null, NativeType.None),\r\n                module.createSetGlobal(\"~started\", module.createI32(1))\r\n              ])\r\n            )\r\n          );\r\n        }\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n      // concrete functions cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration); // TODO: check for duplicates\r\n\r\n      // create the function import\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.resolver.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var currentFunction = this.currentFunction;\r\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY: {\r\n        indexArg = this.compileGetter(<Property>target, expression.expression);\r\n        let type = this.currentType;\r\n        signature = type.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let classType = thisType.classReference;\r\n      let superType = classType\r\n        ? classType.base\r\n          ? classType.base.type\r\n          : null\r\n        : null;\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) { // reuse this var\r\n        flow.addScopedLocalAlias(getGetLocalIndex(thisArg), thisType, \"this\");\r\n        if (superType) flow.addScopedLocalAlias(getGetLocalIndex(thisArg), superType, \"super\");\r\n      } else { // use a temp var\r\n        let thisLocal = flow.addScopedLocal(thisType, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n        if (superType) flow.addScopedLocalAlias(thisLocal.index, superType, \"super\");\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return flow.is(FlowFlags.RETURNS)\r\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\r\n      : body.length > 1\r\n        ? module.createBlock(null, body, returnType.toNativeType())\r\n        : body.length\r\n          ? body[0]\r\n          : module.createNop();\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction, contextualType); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      makeMap<string,Type>(flow.contextualTypeArguments),\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = assert(currentFunction.signature.thisType);\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentEnum || currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expr = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(compiledValues[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var currentFunction = this.currentFunction;\r\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      compileAllocate(this, classReference, expression)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    // traverse to the top-most visible constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance: Function | null = null;\r\n    do {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n      if (constructorInstance) break; // TODO: check visibility\r\n    } while (currentClassInstance = currentClassInstance.base);\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    var expr: ExpressionRef;\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, argumentExpressions, reportNode,\r\n        this.options.usizeType.toNativeZero(this.module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      if (argumentExpressions.length) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", argumentExpressions.length.toString(10)\r\n        );\r\n      }\r\n      expr = this.makeAllocate(classInstance, reportNode);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: {// instance property (here: getter)\r\n        return this.compileGetter(<Property>target, propertyAccess);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(instance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = currentFunction.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = declaration.programLevelInternalName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              makeMap<string,Type>(contextualTypeArguments),\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var typeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let numTypeArguments = typeArgumentNodes.length;\r\n      typeArguments = new Array<Type>(numTypeArguments);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!paramType) return null;\r\n        typeArguments[i] = paramType;\r\n      }\r\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(typeArguments);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // check built-in macro types\r\n    if (simpleName == \"NATIVE\") {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: return Type.i32;\r\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: return Type.u32;\r\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: return Type.void;\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range.atEnd,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // search locals, use prototype\r\n          element = (<Function>context).flow.getScopedLocal(name);\r\n          if (element) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var resolveType = assert(global.declaration).type;\r\n    if (!resolveType) return false;\r\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\r\n    if (!resolvedType) return false;\r\n    global.type = resolvedType;\r\n    global.set(CommonFlags.RESOLVED);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let basicClasses = this.program.basicClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && basicClasses.has(type.kind)) {\r\n            classReference = assert(basicClasses.get(type.kind));\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  determineIntegerLiteralType(\r\n    intValue: I64,\r\n    contextualType: Type\r\n  ): Type {\r\n\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function,\r\n    contextualType: Type = Type.void,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType(\r\n          (<AssertionExpression>expression).toType,\r\n          contextualFunction.flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!type) return null;\r\n        let classType = type.classReference;\r\n        if (!classType) return null;\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return classType;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPrefixExpression>expression).operator) {\r\n          case Token.MINUS: {\r\n            let operand = (<UnaryPrefixExpression>expression).operand;\r\n            // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n            if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n              let type = this.determineIntegerLiteralType(\r\n                i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n                contextualType\r\n              );\r\n              return assert(this.program.basicClasses.get(type.kind));\r\n            }\r\n            return this.resolveExpression(\r\n              operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.PLUS:\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.EXCLAMATION: {\r\n            return assert(this.program.basicClasses.get(TypeKind.BOOL));\r\n          }\r\n          case Token.TILDE: {\r\n            let resolvedOperand = this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n            if (!resolvedOperand) return null;\r\n            throw new Error(\"not implemented\"); // TODO: should all elements have a corresponding type right away?\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPostfixExpression>expression).operator) {\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPostfixExpression>expression).operand,\r\n              contextualFunction,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        // TODO: all sorts of unary and binary expressions, which means looking up overloads and\r\n        // evaluating their return types, knowing the semantics of different operators etc.\r\n        // should probably share that code with the compiler somehow, as it also does exactly this.\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.INTEGER: {\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                this.determineIntegerLiteralType(\r\n                  (<IntegerLiteralExpression>expression).value,\r\n                  contextualType\r\n                ).kind\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.FLOAT: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                contextualType == Type.f32\r\n                  ? TypeKind.F32\r\n                  : TypeKind.F64\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            makeMap<string,Type>(contextualFunction.flow.contextualTypeArguments),\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this.program, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\r\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var classInstances = prototype.instances.get(classInstanceKey);\r\n    if (classInstances) {\r\n      let instance = classInstances.get(instanceKey);\r\n      if (instance) return instance;\r\n    }\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // apply class type arguments if a partially resolved instance method\r\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      let explicitThisType = signatureNode.explicitThisType;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n        if (!thisType) return null;\r\n      } else {\r\n        thisType = classInstance.type;\r\n      }\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    } else {\r\n      if (signatureNode.explicitThisType) {\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          signatureNode.explicitThisType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\r\n    classInstances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    partialPrototype.instances = prototype.instances;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // apply class type arguments if a partially resolved instance method\r\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\r\n      // required there for just resolving a function no matter if a partial or not.\r\n      let classTypeArguments = prototype.classTypeArguments;\r\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    var constructorPrototype = prototype.constructorPrototype;\r\n    if (constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(\r\n        constructorPartial,\r\n        null,\r\n        makeMap<string,Type>(),\r\n        reportMode\r\n      );\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(\r\n          operatorPartial,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instances of element.instances.values()) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable,\r\n  IndexSignatureDeclaration\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[ptr + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[ptr + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFunction,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case \"instantiate\": {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  // __gc_allocate(size, markFn)\r\n  if (program.hasGC && classInstance.type.isManaged(program)) {\r\n    let allocateInstance = assert(program.gcAllocateInstance);\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset),\r\n        module.createI32(\r\n          ensureGCHook(compiler, classInstance)\r\n        )\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n\r\n  // memory.allocate(size)\r\n  } else {\r\n    let allocateInstance = program.memoryAllocateInstance;\r\n    if (!allocateInstance) {\r\n      program.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        reportNode.range, \"memory.allocate\"\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset)\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n  }\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\r\n  if (original) {\r\n    let cloned = new Map<K,V>();\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    return cloned;\r\n  }\r\n  return new Map<K,V>();\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__15__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","NaN","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","indexOf","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","members_1","members_1_1","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence"],"mappings":"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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__15__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low,\n  getGetGlobalName\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return flow.is(FlowFlags.RETURNS)\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\n      : body.length > 1\n        ? module.createBlock(null, body, returnType.toNativeType())\n        : body.length\n          ? body[0]\n          : module.createNop();\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = currentFunction.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    currentFunction.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n  \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n  \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n  \"NaN\": { value: NaN, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}
>>>>>>> New Eval Branch
